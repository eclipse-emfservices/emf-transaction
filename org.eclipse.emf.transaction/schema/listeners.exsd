<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.emf.transaction">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.emf.transaction" id="listeners" name="EMF Transaction Resource Set Listeners"/>
      </appInfo>
      <documentation>
         This extension point declares listeners that are automatically attached to the editing domains that they target, when those editing domains are initialized by the editor domain registry.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <documentation>
            Registers &lt;code&gt;ResourceSetListener&lt;/code&gt; with named editing domains.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="listener" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="listener">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="class"/>
         </appInfo>
         <documentation>
            Registers a &lt;code&gt;ResourceSetListener&lt;/code&gt; that is attached to the identified editing domain instance when it is added to or created by the editing domain registry.  When (and if) the editing domain is unregistered, the listener is removed from it.
If no editing domains are referenced by a listener extension, then the listener is attached to all registered. &lt;code&gt;TransactionalEditingDomain&lt;/code&gt; instances.  Unregistered editing domains are not affected.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="editingDomain" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  Identifies a class implementing the &lt;code&gt;ResourceSetListener&lt;/code&gt; interface.
This class is instantiated (using the default constructor).
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.transaction.ResourceSetListener"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="editingDomain">
      <annotation>
         <documentation>
            Identifies one or more editing domains to attach the listener to.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier of the editing domain, registered via the &lt;code&gt;editingDomains&lt;/code&gt; extension point.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         1.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
This example shows an extension that declares a listener for an example editing domain,
which applies triggers (a pre-commit listener) to ensure model integrity.
&lt;/p&gt;
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.emf.transaction.listeners&quot;&gt;
         
      &lt;listener
            namespaceUri=&quot;http:///org/eclipse/emf/examples/library/extlibrary.ecore/1.0.0&quot;
            class=&quot;com.example.transaction.listeners.EXTLibraryTriggerListener&quot;/&gt;
         &lt;editingDomain id=&quot;com.example.my.editing.domain&quot;/&gt;
      &lt;/listener&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The value of the &lt;tt&gt;&amp;lt;listener&amp;gt;&lt;/tt&gt; element &lt;tt&gt;class&lt;/tt&gt; attribute must be the fully qualified name of a class that implements
the &lt;code&gt;org.eclipse.emf.transaction.ResourceSetListener&lt;/code&gt; interface.  It is instantiated using the default (no-argument) constructor.
&lt;p&gt;
A few convenient abstract classes are provided that you may extend instead of directly implementing the listener interface.  These include:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;org.eclipse.emf.transaction.ResourceSetListenerImpl&lt;/code&gt;:  provides empty
      implementations of the call-back methods, so that subclasses simply implement those
      that are of interest&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.eclipse.emf.transaction.DemultiplexingListener&lt;/code&gt;:  a post-commit
      listener that calls an abstract callback (implemented by subclasses) for each
      notification individually&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org.eclipse.emf.transaction.TriggerListener&lt;/code&gt;:  a pret-commit
      listener that calls an abstract callback (implemented by subclasses) for each
      notification individually, composing the resulting commands on the subclass&apos;s
      behalf&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2005, 2006  IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
