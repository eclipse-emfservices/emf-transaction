<project default="run">
	<target name="init">

		<!-- new 060413 due to changes in basebuilder (3.2M6) -->
		<echo message="Set compilerArgs = '-enableJavadoc -encoding ISO-8859-1 -warn:-serial,nls,unchecked'"/>
		<property name="compilerArg" value="-enableJavadoc -encoding ISO-8859-1 -warn:-serial,nls,unchecked" />
		
		<!-- new 040216 to resolve jar dependencies in using IBM JDK (core.jar + *.jar) instead of Sun JDK (rt.jar) -->
		<path id="bc">
			<fileset dir="${java.home}/lib">
				<include name="*.jar" />
			</fileset>
		</path>
		<property name="bootclasspath" refid="bc" />

		<property name="buildingOSGi" value="true" />
		<property name="collectingFolder" value="eclipse" />
		<property name="archivePrefix" value="eclipse" />

		<!-- Reduce the amount of info in the build log -->
		<property name="javacVerbose" value="false" />

		<property name="buildDirectory" location="${basedir}/../src/eclipse" />
		<property file="${basedir}/repoInfo.properties" />
		<property name="testBase" location="${buildDirectory}/../testing" />
		<available file="${buildDirectory}/label.properties" property="label.properties.exists" />
		<antcall target="create.label.properties" />
		<property file="${buildDirectory}/label.properties" />
		
		<echo message="buildAll.xml properties:"/>
		<echo message="basedir = ${basedir}"/>

		<!-- load a value for ${subprojectName} -->
		<property name="buildConfigFile" value="${basedir}/../build.cfg"/>
		<available file="${buildConfigFile}" type="file" property="buildConfigIsAvailable" />
		<fail message="Can't load build properties from ${buildConfigFile}" unless="buildConfigIsAvailable"/>
		
		<!-- TODO: set any special build-related properties here by echoing them into ${buildConfigFile}:
		<echo file="${buildConfigFile}" append="true">

# extra properties specific to just this build
propertyName=propertyValue
</echo>	-->
		<property file="${buildConfigFile}" />

		<echo message="buildVer = ${buildVer}"/>
		<echo message="subprojectName = ${subprojectName}"/>

		<!-- <echo message="Base OS: ${baseos}; Base Window System: ${basews}"/> -->
		<condition property="isWindows">
			<equals arg1="${baseos}.${basews}" arg2="win32.win32" />
		</condition>
		<condition property="isLinuxGTK">
			<equals arg1="${baseos}.${basews}" arg2="linux.gtk" />
		</condition>
		<condition property="isLinuxMotif">
			<equals arg1="${baseos}.${basews}" arg2="linux.motif" />
		</condition>

		<!-- Check whether we are to build the 3-in-1 QTV features -->
		<condition property="skip-emf-qtv">
			<not>
				<and>
					<isset property="queryURL"/>
					<isset property="oclURL"/>
				</and>
			</not>
		</condition>
	</target>

	<target name="create.label.properties" unless="label.properties.exists">
		<mkdir dir="${buildDirectory}" />
		<tstamp />
		<property name="date" value="${DSTAMP}" />
		<property name="time" value="${TSTAMP}" />
		<property name="timestamp" value="${date}${time}" />
		<property name="buildType" value="I" />

		<!--this naming convention used by php scripts on download server-->
		<property name="buildLabel" value="${buildType}${timestamp}" />

		<property name="buildAlias" value="${buildLabel}" />
		<property name="buildId" value="${buildAlias}" />

		<!--store the build label information in a file-->
		<echo file="${buildDirectory}/label.properties" append="true">
		buildType=${buildType}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true">
		buildId=${buildId}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true">
		timestamp=${timestamp}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true">
		buildLabel=${buildLabel}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true">
		buildAlias=${buildAlias}
		</echo>
	</target>

	<target name="run" depends="init">
		<antcall target="buildAll" />
		<antcall target="test" />
		<antcall target="publish" />
		<antcall target="cleanUp" />
	</target>

	<target name="runTestsOnly" depends="init">
		<delete dir="${buildDirectory}" />
		<mkdir dir="${buildDirectory}/${buildLabel}" />
		<copy todir="${buildDirectory}/${buildLabel}">
			<fileset dir="${buildDirectory}/..">
				<include name="**/*.zip" />
			</fileset>
		</copy>
		<antcall target="test" />
		<antcall target="publish" />
		<antcall target="cleanUp" />
	</target>

	<target name="runWithoutTest" depends="init">
		<antcall target="buildAll" />
		<antcall target="publish" />
		<antcall target="cleanUp" />
	</target>

	<target name="buildOnly" depends="init">
		<antcall target="buildAll" />
		<antcall target="cleanUp" />
	</target>

	<target name="buildAll">
		<ant antfile="build.xml" target="main">
			<property name="component" value="builder/sdk" />
		</ant>

		<ant antfile="build.xml" target="main">
			<property name="component" value="builder/runtime" />
		</ant>

		<ant antfile="build.xml" target="main">
			<property name="component" value="builder/examples" />
		</ant>

		<ant antfile="build.xml" target="main">
			<property name="component" value="builder/tests" />
		</ant>
		
		<!-- If a Query URL was specified, build the 3-in-1 features, too -->
		<antcall target="-build-emf-qtv"/>
		
		<!-- doc must be the last execution -->

		<ant antfile="build.xml" target="main">
			<property name="component" value="builder/doc" />
		</ant>

		<!-- add .workbench and .ui features + plugins from SDK to runtime -->
	    <zip destfile="${buildDirectory}/${buildLabel}/emf-${subprojectName}-runtime-${buildAlias}.zip" update="true">
			<zipfileset src="${buildDirectory}/${buildLabel}/emf-${subprojectName}-SDK-${buildAlias}.zip">
				<include name="**/org.eclipse.emf.${subprojectName}.ui*"/>
				<include name="**/org.eclipse.emf.${subprojectName}.ui*/*"/>
				<include name="**/org.eclipse.emf.workspace_*"/>
				<include name="**/org.eclipse.emf.workspace_*/*"/>
				<include name="**/org.eclipse.emf.workspace.ui_*"/>
				<include name="**/org.eclipse.emf.workspace.ui_*/*"/>
				<exclude name="**/org.eclipse.*.source*"/>
				<exclude name="**/org.eclipse.*.source*/**"/>
				<exclude name="**/*src.zip"/>
			</zipfileset>
	    </zip>

		<!-- add .workbench and .ui features + plugins from SDK to examples -->
	    <zip destfile="${buildDirectory}/${buildLabel}/emf-${subprojectName}-examples-${buildAlias}.zip" update="true">
			<zipfileset src="${buildDirectory}/${buildLabel}/emf-${subprojectName}-SDK-${buildAlias}.zip">
				<include name="**/org.eclipse.emf.workspace.examples*"/>
				<include name="**/org.eclipse.emf.workspace.examples*/*"/>
			</zipfileset>
	    </zip>

		<!-- md5 files generation -->

		<exec executable="bash" dir="${buildDirectory}/${buildLabel}">
			<arg line="${basedir}/../org.eclipse.modeling.common.releng/scripts/createZipCheckSum.sh" />
		</exec>
	</target>
	
	<!-- Optional target for building the 3-in-1 emf.emfqtv.all features -->
	<target name="-build-emf-qtv" unless="skip-emf-qtv">
		<ant antfile="build.xml" target="main" >
			<property name="component" value="builder/emfqtv" />
		</ant>
	</target>

	<target name="cleanUp">
		<echo message="** Copying generated zips to drop folder... **" />
		<copy todir="${buildDirectory}/.." failonerror="false" overwrite="true">
			<fileset dir="${buildDirectory}/${buildLabel}" />
		</copy>
	</target>

	<target name="test">
		<property name="test.xml" value="../org.eclipse.releng.basebuilder/plugins/org.eclipse.build.tools/scripts/test.xml" />
		<antcall target="test-win32-local" />
		<antcall target="test-linux-gtk-local" />
		<antcall target="test-linux-motif-local" />
	</target>

	<target name="test-win32-local" if="isWindows">
		<ant antfile="${test.xml}">
			<property name="shell" value="relengbuildwin2.bat" />
			<property name="tester" value="${basedir}/builder/tests/configs/local" />
		</ant>
	</target>

	<target name="test-linux-gtk-local" if="isLinuxGTK">
		<ant antfile="${test.xml}">
			<property name="shell" value="relengbuildgtk.sh" />
			<property name="tester" value="${basedir}/builder/tests/configs/local" />
		</ant>
	</target>

	<target name="test-linux-motif-local" if="isLinuxMotif">
		<ant antfile="${test.xml}">
			<property name="shell" value="relengbuildmotif.sh" />
			<property name="tester" value="${basedir}/builder/tests/configs/local" />
		</ant>
	</target>

	<target name="publish">
		<copy todir="${buildDirectory}/${buildLabel}" overwrite="true">
			<fileset
				dir="${buildDirectory}/../org.eclipse.modeling.common.releng/staticDropFiles" />
		</copy>
	</target>

</project>
