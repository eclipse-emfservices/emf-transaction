<project default="run">

	<target name="init">

		<!-- common releng helper scripts -->
		<property name="helper" value="${buildDirectory}/../org.eclipse.modeling.common.releng/scripts/buildAllHelper.xml" />

		<echo message="Set compilerArgs = '-enableJavadoc -encoding ISO-8859-1 -warn:-serial,nls,unchecked,warningToken'" />
		<property name="compilerArg" value="-enableJavadoc -encoding ISO-8859-1 -warn:-serial,nls,unchecked,warningToken" />

		<property name="commonScriptsDir" value="${basedir}/../org.eclipse.modeling.common.releng/scripts" />

		<path id="bc">
			<fileset dir="${java.home}/lib">
				<include name="*.jar" />
			</fileset>
		</path>
		<property name="bootclasspath" refid="bc" />

		<property name="buildingOSGi" value="true" />
		<property name="collectingFolder" value="eclipse" />
		<property name="archivePrefix" value="eclipse" />

		<!-- Reduce the amount of info in the build log -->
		<property name="javacVerbose" value="false" />

		<property name="buildDirectory" location="${basedir}/../src/eclipse" />
		<property file="${basedir}/repoInfo.properties" />
		<property name="testBase" location="${buildDirectory}/../testing" />
		<available file="${buildDirectory}/label.properties" property="label.properties.exists" />
		<ant target="create.label.properties" antfile="${helper}" />
		<property file="${buildDirectory}/label.properties" />

		<echo message="buildAll.xml properties:" />
		<echo message="basedir = ${basedir}" />

		<!-- load a value for ${subprojectName} -->
		<property name="buildConfigFile" value="${basedir}/../build.cfg" />
		<available file="${buildConfigFile}" type="file" property="buildConfigIsAvailable" />
		<fail message="Can't load build properties from ${buildConfigFile}" unless="buildConfigIsAvailable" />

		<!-- TODO: set any special build-related properties here by echoing them into ${buildConfigFile}:
		<echo file="${buildConfigFile}" append="true">

# extra properties specific to just this build
propertyName=propertyValue
</echo>	-->
		<property file="${buildConfigFile}" />

		<echo message="buildVer = ${buildVer}" />
		<echo message="subprojectName = ${subprojectName}" />

		<!-- <echo message="Base OS: ${baseos}; Base Window System: ${basews}"/> -->
		<condition property="isWindows">
			<equals arg1="${baseos}.${basews}" arg2="win32.win32" />
		</condition>
		<condition property="isLinuxGTK">
			<equals arg1="${baseos}.${basews}" arg2="linux.gtk" />
		</condition>
		<condition property="isLinuxMotif">
			<equals arg1="${baseos}.${basews}" arg2="linux.motif" />
		</condition>

		<!-- required for signing & repackaging master zip into smaller zips -->
		<property name="masterZip" value="${projectName}-${subprojectName}-Master-${buildAlias}.zip" />
		<property name="allZip" value="${projectName}-${subprojectName}-ALL-${buildAlias}.zip" />
		<property name="SDKZip" value="${projectName}-${subprojectName}-SDK-${buildAlias}.zip" />
		<property name="examplesZip" value="${projectName}-${subprojectName}-examples-${buildAlias}.zip" />
		<property name="java15-home" value="/opt/sun-java2-5.0" />
		<property name="stagingHome" value="/home/data/httpd/download-staging.priv" />
		<property name="projectPath" value="modeling/emf" />
		<!-- user with write perms in staging dir & permission to run /usr/bin/sign -->
		<property name="buildServerUser" value="nickb@build.eclipse.org" />
		<condition property="sign">
			<or>
				<!-- want to enable/disable signing for a given build type? add/remove types here -->
				<equals arg1="${buildType}" arg2="I" />
				<equals arg1="${buildType}" arg2="M" />
				<equals arg1="${buildType}" arg2="S" />
				<equals arg1="${buildType}" arg2="R" />
			</or>
		</condition>
	</target>

	<target name="buildAll">
		<macrodef name="echo-timestamp">
			<sequential>
				<ant target="-timestamp" inheritAll="false" antfile="${helper}" />
			</sequential>
		</macrodef>

		<echo-timestamp />
		<ant antfile="build.xml" target="main">
			<property name="component" value="builder/all" />
		</ant>

		<echo-timestamp />
		<ant target="signMasterZip" antfile="${helper}">
			<property name="mailStatus" value="nomail" />
		</ant>

		<!-- Unpack jars to produce SDK zip with mix of folders & jars -->
		<ant target="unpackUpdateJarsAndRepack" antfile="${helper}">
			<property name="sourceZip" value="${buildDirectory}/${buildLabel}/${masterZip}" />
			<property name="targetZip" value="${buildDirectory}/${buildLabel}/${allZip}" />
		</ant>

		<!-- remove rootfiles -->
		<ant target="removeRootFilesFromMaster" antfile="${helper}" />

		<!-- pack the master zip -->
		<ant target="packMasterZip" antfile="${helper}" />

		<echo-timestamp />

		<!-- build SDK -->
		<zip destfile="${buildDirectory}/${buildLabel}/${SDKZip}" update="true">
			<zipfileset src="${buildDirectory}/${buildLabel}/${allZip}"
				    dirmode="775" filemode="664"
				    id="SDKZipFiles"
				    excludes="**/*.pack.gz,
                              **/pack.properties,
                              **/features/*.jar,
                              **/features/org.eclipse.*.all*,
				              **/features/org.eclipse.*.all*/**,
				              **/org.eclipse.*.example*,
				              **/org.eclipse.*.example*/**,
				              **/org.eclipse.*.master_*,
				              **/org.eclipse.*.master_*/**,
				              **/plugins/*.source_*.jar" />
			<zipfileset src="${buildDirectory}/${buildLabel}/${allZip}"
				    dirmode="775" filemode="664"
				    id="SDKZipFiles2"
				    includes="**/plugins/org.eclipse.emf.transaction.examples_*.jar,
                              **/plugins/org.eclipse.emf.transaction*.source_*.jar,
                              **/plugins/org.eclipse.emf.workspace*.source_*.jar"
                    excludes="**/plugins/org.eclipse.emf.*.example*.source_*.jar" />
		</zip>

		<!-- build runtime -->
		<zip destfile="${buildDirectory}/${buildLabel}/${projectName}-${subprojectName}-runtime-${buildAlias}.zip" update="true">
			<zipfileset src="${buildDirectory}/${buildLabel}/${SDKZip}"
				    dirmode="775" filemode="664"
				    id="runtimeFiles"
				    excludes="**/org.eclipse.*.example*,
				              **/org.eclipse.*.example*/**,
				              **/org.eclipse.*.sdk*,
				              **/org.eclipse.*.sdk*/**,
				              **/org.eclipse.*.doc*,
				              **/org.eclipse.*.doc*/*,
				              **/org.eclipse.*.source*,
				              **/org.eclipse.*.source*/**,
				              **/*src.zip"
				    includes="**/org.eclipse.emf.transaction_*,
				              **/org.eclipse.emf.transaction_*/**,
				              **/org.eclipse.emf.transaction.ui_*,
				              **/org.eclipse.emf.transaction.ui_*/**,
				              **/org.eclipse.emf.workspace_*,
				              **/org.eclipse.emf.workspace_*/**,
				              **/org.eclipse.emf.workspace.ui_*,
				              **/org.eclipse.emf.workspace.ui_*/**" />
			<zipfileset src="${buildDirectory}/${buildLabel}/${SDKZip}"
			        dirmode="775" filemode="664"
			        id="rootfiles"
			        includes="**/eclipse/epl-v10.html
				              **/eclipse/notice.html" />
		</zip>

		<!-- build examples -->
		<zip destfile="${buildDirectory}/${buildLabel}/${examplesZip}" update="true">
			<zipfileset src="${buildDirectory}/${buildLabel}/${allZip}"
				    dirmode="775" filemode="664"
				    id="examplesZipFiles"
				    excludes="**/*.pack.gz,
                              **/pack.properties,
                              **/features/*.jar"
                    includes="**/org.eclipse.*.example*,
                              **/org.eclipse.*.example*/**" />
			<zipfileset refid="rootfiles" />
		</zip>

		<!-- remove .master features from Master zip as they're not required on the update site -->
		<zip destfile="${buildDirectory}/${buildLabel}/${masterZip}.tmp" update="true">
			<zipfileset src="${buildDirectory}/${buildLabel}/${masterZip}"
				    dirmode="775" filemode="664"
				    excludes="**/*emf.transaction.master_*,
				              **/*emf.transaction.master_*/**" />
		</zip>
		<move file="${buildDirectory}/${buildLabel}/${masterZip}.tmp" tofile="${buildDirectory}/${buildLabel}/${masterZip}" overwrite="true" />

		<echo-timestamp />

		<!-- ${allZip} is no longer needed, and we don't publish it -->
		<delete file="${buildDirectory}/${buildLabel}/${allZip}" failonerror="true" quiet="true" />

		<ant antfile="build.xml" target="main">
			<property name="component" value="builder/tests" />
		</ant>
		<echo-timestamp />
		<ant target="generateDigests" antfile="${helper}" />

	</target>

	<!-- main entry points are run, runtestsOnly, runWithoutTest, and buildOnly -->

	<target name="run" depends="init">
		<antcall target="buildAll" />
		<ant target="test" antfile="${helper}" />
		<ant target="publish" antfile="${helper}" />
		<ant target="cleanUp" antfile="${helper}" />
	</target>

	<target name="runTestsOnly" depends="init">
		<delete dir="${buildDirectory}" />
		<mkdir dir="${buildDirectory}/${buildLabel}" />
		<copy todir="${buildDirectory}/${buildLabel}">
			<fileset dir="${buildDirectory}/..">
				<include name="**/*.zip" />
			</fileset>
		</copy>
		<ant target="test" antfile="${helper}" />
		<ant target="publish" antfile="${helper}" />
		<ant target="cleanUp" antfile="${helper}" />
	</target>

	<target name="runWithoutTest" depends="init">
		<antcall target="buildAll" />
		<ant target="publish" antfile="${helper}" />
		<ant target="cleanUp" antfile="${helper}" />
	</target>

	<target name="buildOnly" depends="init">
		<antcall target="buildAll" />
		<ant target="cleanUp" antfile="${helper}" />
	</target>

</project>
